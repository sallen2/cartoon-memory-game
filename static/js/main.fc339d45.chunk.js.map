{"version":3,"sources":["components/Pics/Pics.js","components/Header/Header.js","components/ClickyGame/ClickyGame.js","App.js","serviceWorker.js","index.js"],"names":["Pics","props","react_default","a","createElement","className","style","width","height","margin","alt","name","src","Header","score","topScore","ClickyGame","state","friends","clicked","checkFriendClick","_this","some","clickedName","clickedFriend","isClicked","console","log","slice","push","onPicClickHandler","e","_this$clickedFriend","target","shuffle","setState","_this2","this","components_Header_Header","map","friend","i","key","onClick","Pics_Pics","image","Component","App","components_ClickyGame_ClickyGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAwBeA,MAtBf,SAAcC,GAaZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,MAZjB,CACZC,MAAO,QACPC,OAAQ,QACRC,OAAQ,QAUNP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAI,OAAOC,KAAMV,EAAMU,KAAML,MARxB,CACdC,MAAO,QACPC,OAAQ,SAM8CH,UAAU,YAAYO,IAAKX,EAAMW,sBCC5EC,MAhBf,SAAgBZ,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACjCH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,mBAAWH,EAAMa,MAAjB,iBAAsCb,EAAMc,WAEhDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,+BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,gGCgEOW,6MAtEbC,MAAQ,CACNC,UACAC,QAAS,GACTL,MAAO,EACPC,SAAU,KAGZK,iBAAmB,SAACT,GAClB,OAAOU,EAAKJ,MAAME,QAAQG,KAAK,SAAAC,GAC7B,OAAIZ,IAASY,OAQjBC,cAAgB,SAACb,GACf,IAAMc,EAAYJ,EAAKD,iBAAiBT,GAExC,GADAe,QAAQC,IAAIF,GACRA,EACF,MAAO,CACLN,QAAS,GACTL,MAAO,GAGT,IAAMK,EAAUE,EAAKJ,MAAME,QAAQS,QAEnC,OADAT,EAAQU,KAAKlB,GACN,CACLQ,UACAL,MAAOO,EAAKJ,MAAMH,MAAQ,MAKhCC,SAAW,SAACD,GACV,OAAGA,GAASO,EAAKJ,MAAMF,SACdD,EAEAO,EAAKJ,MAAMF,YAItBe,kBAAoB,SAACC,GAAM,IAAAC,EACEX,EAAKG,cAAcO,EAAEE,OAAOtB,MAA/CQ,EADiBa,EACjBb,QAASL,EADQkB,EACRlB,MACXC,EAAWM,EAAKN,SAASD,GACzBI,EAAUgB,IAAQb,EAAKJ,MAAMC,QAAQU,SAC3CP,EAAKc,SAAS,CAAEjB,UAASC,UAASL,QAAOC,sFAGlC,IAAAqB,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,CAAQxB,MAAOuB,KAAKpB,MAAMH,MAAOC,SAAUsB,KAAKpB,MAAMF,WACtDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZgC,KAAKpB,MAAMC,QAAQqB,IAAI,SAACC,EAAQC,GAC/B,OACEvC,EAAAC,EAAAC,cAAA,OAAKsC,IAAKD,EAAGE,QAASP,EAAKN,kBAAmBzB,UAAU,YACtDH,EAAAC,EAAAC,cAACwC,EAAD,CAAMjC,KAAM6B,EAAO7B,KAAMC,IAAK4B,EAAOK,qBA5D9BC,aCMVC,0LANX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAD,aAHYF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fc339d45.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Pics(props) {\n\n  const style = {\n    width: '200px',\n    height: '200px',\n    margin: '10%',\n  }\n\n  const imgSize = {\n    width: '150px',\n    height: '150px',\n  }\n\n  return (\n    <div className=\"shadow card\" style={style}>\n      <div className=\"card-body\">\n        <img alt='pics' name={props.name} style={imgSize} className='img-fluid' src={props.src}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Pics","import React from 'react'\nimport './Header.css'\n\nfunction Header(props) {\n  return (\n    <div>\n      <nav className=\"navbar\">\n          <p>Cartoon Memories <i className=\"fas fa-gamepad fa-lg\"></i></p>\n          <p>Click an image to begin!</p>\n          <p>Score: {props.score} | Top Score: {props.topScore}</p>\n      </nav>\n      <div className='jumbotron header'>\n        <h1 className='text-center'>Lets play Cartoon Memories!</h1>\n        <p className='text-center'>Click on an image to earn points, but don't click on any more than once!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Header","import React, { Component } from 'react'\nimport Pics from '../Pics/Pics'\nimport friends from '../../friends'\nimport Header from '../Header/Header'\nimport shuffle from 'lodash.shuffle'\n\nclass ClickyGame extends Component {\n  state = {\n    friends,\n    clicked: [],\n    score: 0,\n    topScore: 0,\n  }\n\n  checkFriendClick = (name) => {\n    return this.state.clicked.some(clickedName => {\n      if (name === clickedName) {\n        return true\n      } else {\n        return false\n      }\n    })\n  }\n\n  clickedFriend = (name) => {\n    const isClicked = this.checkFriendClick(name)\n    console.log(isClicked)\n    if (isClicked) {\n      return {\n        clicked: [],\n        score: 0\n      }\n    } else {\n      const clicked = this.state.clicked.slice()\n      clicked.push(name)\n      return {\n        clicked,\n        score: this.state.score + 1\n      }\n    }\n  }\n\n  topScore = (score)=>{\n    if(score >= this.state.topScore){\n      return score\n    }else{\n      return this.state.topScore\n    }\n  }\n\n  onPicClickHandler = (e) => {\n    const { clicked, score } = this.clickedFriend(e.target.name)\n    const topScore = this.topScore(score)\n    const friends = shuffle(this.state.friends.slice())\n    this.setState({ friends, clicked, score, topScore })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore}/>\n        <div className='container'>\n          <div className='row'>\n            {this.state.friends.map((friend, i) => {\n              return (\n                <div key={i} onClick={this.onPicClickHandler} className='col-md-3'>\n                  <Pics name={friend.name} src={friend.image} />\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ClickyGame","import React, { Component } from 'react';\nimport ClickyGame from './components/ClickyGame/ClickyGame'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <ClickyGame />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}